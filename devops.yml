AWSTemplateFormatVersion: "2010-09-09"

Description: >
  AWS CloudFormation Template for deployment through AWS Codepipeline.

Parameters:
  RepositoryOwner:
    Type: String
    Description: The related Github repo owner.
    Default: Blockchain-Web-Services

  RepositoryName:
    Type: String
    Description: The related Github repo name that triggers the pipeline.
    Default: bws-api-nft-zk

  RepositoryBranchName:
    Type: String
    Description: Git branch that triggers the pipeline.

  GitHubSecret:
    Type: String
    NoEcho: true
    Description: GitHub Secret to access the required repos.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "GitHub Repository Settings"
        Parameters:
          - RepositoryOwner
          - RepositoryName
          - RepositoryBranchName
          - GitHubSecret

Conditions:
  IsProd: !Equals [!Ref RepositoryBranchName, prod]

Resources:
  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "devops-artifacts-${RepositoryName}-${RepositoryBranchName}"
      VersioningConfiguration:
        Status: Enabled

  Webhook:
    Type: "AWS::CodePipeline::Webhook"
    Properties:
      Name: !Sub "webhook-${RepositoryName}-${RepositoryBranchName}"
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubSecret
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      Authentication: GITHUB_HMAC
      TargetPipeline: !Ref WebhookPipeline
      TargetAction: SourceAction
      TargetPipelineVersion: !GetAtt WebhookPipeline.Version
      RegisterWithThirdParty: true

  WebhookPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref ArtifactStoreBucket
        Type: S3
      DisableInboundStageTransitions: []
      Name: !Sub "devops-${RepositoryName}-${RepositoryBranchName}"
      RoleArn: !GetAtt [PipelineRole, Arn]
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: "1"
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref RepositoryOwner
                Repo: !Ref RepositoryName
                Branch: !Ref RepositoryBranchName
                OAuthToken: !Ref GitHubSecret
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Code
          Actions:
            - Name: BuildCode
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOuput
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1
        - Name: NodeStacks
          Actions:
            - Name: NodeLambdasStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              InputArtifacts:
                - Name: BuildOuput
              Configuration:
                # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/continuous-delivery-codepipeline-action-reference.html#w2ab1c13c13b9
                ActionMode: !If [IsProd, CREATE_UPDATE, REPLACE_ON_FAILURE]
                Capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                RoleArn: !GetAtt [CloudFormationRole, Arn]
                StackName: !Sub "node-lambdas-${RepositoryName}-${RepositoryBranchName}"
                TemplateConfiguration: !Sub "BuildOuput::.deploy/IaC/node-lambdas/node-lambdas-${RepositoryBranchName}.json"
                TemplatePath: !Sub "BuildOuput::.deploy/IaC/node-lambdas/node-lambdas.yml"
              RunOrder: 1

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "codepipeline-${RepositoryName}-${RepositoryBranchName}"
      AssumeRolePolicyDocument:
        Statement:
          - Action: ["sts:AssumeRole"]
            Effect: Allow
            Principal:
              Service: [codepipeline.amazonaws.com]
        Version: "2012-10-17"
      Path: /
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "cloudwatch:*"
                  - "events:*"
                  - "s3:*"
                  - "logs:*"
                  - "cloudformation:*"
                  - "iam:PassRole"
                  - "sns:Publish"
                  - "codebuild:*"
                  - "secretsmanager:GetSecretValue"
                Effect: Allow
                Resource: "*"

  #TODO Create a more specific role
  CloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "cloudformation-${RepositoryName}-${RepositoryBranchName}"
      AssumeRolePolicyDocument:
        Statement:
          - Action: ["sts:AssumeRole"]
            Effect: Allow
            Principal:
              Service: [cloudformation.amazonaws.com]
        Version: "2012-10-17"
      Path: /
      Policies:
        - PolicyName: CloudFormationRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "cloudwatch:*"
                  - "events:*"
                  - "s3:*"
                  - "kms:*"
                  - "lambda:*"
                  - "dynamodb:*"
                  - "apigateway:*"
                  - "sns:*"
                  - "logs:*"
                  - "sqs:*"
                  - "cloudformation:*"
                  - "iam:*"
                  - "cognito-idp:*"
                  - "cognito-identity:*"
                  - "acm:*"
                  - "cloudfront:*"
                  - "route53:*"
                  - "secretsmanager:GetSecretValue"
                  - "states:*"
                Effect: Allow
                Resource: "*"

  # Code CodeBuild
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        # https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html
        Image: aws/codebuild/standard:6.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: REPOSITORY_NAME
            Value: !Ref RepositoryName
          - Name: REPOSITORY_BRANCH_NAME
            Value: !Ref RepositoryBranchName
      Source:
        Type: CODEPIPELINE
        BuildSpec: ".deploy/.build/code.yml"
      TimeoutInMinutes: 10
      Cache:
        Type: S3
        Location: !Sub "devops-artifacts-${RepositoryName}-${RepositoryBranchName}/codebuild"

  #TODO Create a more specific role
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "codebuild-${RepositoryName}-${RepositoryBranchName}"
      AssumeRolePolicyDocument:
        Statement:
          - Action: ["sts:AssumeRole"]
            Effect: Allow
            Principal:
              Service: [codebuild.amazonaws.com]
        Version: "2012-10-17"
      Path: /
      Policies:
        - PolicyName: General
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "s3:*"
                  - "logs:*"
                  - "lambda:*"
                  - "sqs:*"
                  - "dynamodb:*"
                  - "states:*"
                  - "iam:PassRole"
                  - "sns:Publish"
                  - "cloudformation:DescribeStacks"
                  - "cloudfront:CreateInvalidation"
                  - "secretsmanager:GetSecretValue"
                Effect: Allow
                Resource: "*"
        - PolicyName: Secrets
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "secretsmanager:GetSecretValue"
                Effect: Allow
                Resource: "*"

Outputs:
  WebHookURL:
    Description: The URL to use to register webhook on git side.
    Value: !GetAtt Webhook.Url
